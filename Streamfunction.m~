% Time averaged Eulerian Streamfunction

function [Psi] = Streamfunction(vel)

close all
clear all

%state = rdmnc('state.*') ;
vel = rdmnc('state.*') ;
grid = rdmnc('grid.*') ;
%nn = length(state.iter) ;

Z = grid.Z' ;
Y = grid.Y ;
V = vel.V ;
dx = (grid.XC(2,1)-grid.XC(1,1)) ;
lm = grid.HFacS ;

%Depth integration
dz = Z(1:end-1)-Z(2:end) ;
dz = [0-Z(1);dz] ;
V = squeeze(V(:,:,:,1)).*lm ;
% inverting order
Vf = V(:,:,end:-1:1) ;
dzf = dz(end:-1:1) ;
Vfdx = squeeze(sum(Vf*dx)) ;

% Depth integration
Vdz = zeros(length(Y),length(Z)+1) ;

for i = 1 : length(Y)
    Vdz(i,2:length(Z)+1)=squeeze(Vfdx(i,:)).*dzf';
end

Psi = Vdz ; %sum(Vdz,2) ; 
Psi = Psi(:,end:-1:1) ;
  
    pcolor(Y/1000,[Z;Z(end)-250],Psi(:,1:length(Z)+1)');  %can add ,15 to add more contours
    shading flat
    cmax=max(max((Psi(:,1:length(Z)+1))));
    cmin=min(min((Psi(:,1:length(Z)+1))));
    colormap(b2r(cmin,cmax)) 
    xlabel('Meridional distance (km)','fontsize',12)
    ylabel('Depth (m)','fontsize',12)
    title(' Eulerian mean overturning','fontsize',12)
    h=colorbar;
    ylabel(h,'Transport (Sv)','fontsize',12)
% 

end