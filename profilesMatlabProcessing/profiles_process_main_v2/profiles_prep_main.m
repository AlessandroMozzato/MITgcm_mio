function profiles_prep_main(dataset)
% profiles_prep_main(dataset)
%
%  main routine to process hydrographic data set :
%	1) read, resample vertically and save hydrographic data in the MITprof netcdf format
%	2) set quality flag, colocated climatologial data and weights for each profile
%
%  input: dataset is a struct generated by profiles_prep_select, and
%       describing the dataset that must be processed, and processing options.
%
%  Important: some important variables are set as global: 
%                       mygrid mytri MYBASININDEX atlas sigma
%       These variables are loaded by the function profiles_prep_load_fields
%       However, if mygrid is non-empty, no attempt to reload these variables will
%       be made.
%


gcmfaces_global;
global mytri MYBASININDEX atlas sigma
global useNativeMatlabNetcdf

if isempty(myenv.verbose), myenv.verbose=0; end
if isempty(mygrid) | isempty(mytri) | isempty(MYBASININDEX) | isempty(atlas) | isempty(sigma), 
    profiles_prep_load_fields; 
end
if isempty(useNativeMatlabNetcdf), useNativeMatlabNetcdf = ~isempty(which('netcdf.open')); end




%% STEP 1: read, resample vertically and save hydrographic data in the MITprof netcdf format
if myenv.verbose; disp('step 1: convert into MITprof netcdf format'); end


% determine the full output file name
[pathstr, name, ext] = fileparts([dataset.dirOut dataset.fileOut]);
if isempty(pathstr) | strcmp(pathstr,'.'), pathstr=pwd; end
if isempty(ext) | ~strcmp(ext,'.nc'), ext='.nc'; end
dataset.fileOut=[name ext];

%get the list of files to be treated :
nfiles=length(dataset.fileInList);
if nfiles==0, disp('no files to process'); return, end

% init global variables used to store temporary loaded profiles
MITprofCur=profiles_prep_write_nc(dataset,[],'init');

% main loop
for nf=1:nfiles % FILE LOOP
    
    if myenv.verbose & mod(nf,10)==0,
        fprintf('%s : %04d --> %04d \n',dataset.name,nf,nfiles);
    end;
    
        
    % load file information:
    eval(['dataset=profiles_read_' dataset.name '(dataset,nf,0);']);
    
    % extract and process individual profiles
    nprofiles=dataset.nprofiles;
    for np=1:nprofiles;
        
        if myenv.verbose & mod(np,100)==0,
            fprintf('\t : %04d --> %04d\n',np,nprofiles);
        end
        
        % read 1 profile:
        eval(['profileCur=profiles_read_' dataset.name '(dataset,nf,np);']);
        if isempty(profileCur), continue, end
            
        %conversions of p->z, Tinsitu->Tpot, and 0-360 lon to -180+180 lon:
        profileCur=profiles_prep_convert(dataset,profileCur);
        
        %interpolate to standard levels:
        if strcmp(dataset.coord,'depth');
          profileCur=profiles_prep_interp(dataset,profileCur);
        else;
           %switch to isopycnal coordinate:
           profileCur=profiles_isopycnal_z(dataset,profileCur,dataset.coord);
           profileCur=profiles_isopycnal_interp(dataset,profileCur);
        end;

        %placeholders:
        profileCur.point=0; profileCur.basin=0;
        profileCur.t_equi=0; profileCur.t_w=0;
        if ~strcmp(dataset.coord,'depth'); profileCur.depth_equi=0; end;
        if dataset.inclS; profileCur.s_equi=0; profileCur.s_w=0; end;
        %(the corresponding arrays will be filled in
        %profiles_prep_tests/part2 and profiles_prep_weights)
        
        %carry basic tests:
        profileCur=profiles_prep_tests_basic(dataset,profileCur);
        
        %store/write results in global variables (and in .mat files if buffer is full):
        MITprofCur=profiles_prep_write_nc(dataset,profileCur,'add',MITprofCur);
        
    end      % LOCATION LOOP
end      % FILE LOOP


% write profiles in the MITprof netcdf file
profiles_prep_write_nc(dataset,profileCur,'write',MITprofCur);
if ~exist([dataset.dirOut dataset.fileOut],'file'), return, end



%% STEP 2: set quality flag, colocated climatologial data and weights for each profile


if myenv.verbose; disp('step 2: weights and tests'); end

%test whether gcmfaces package is in the path...
gcmfacesISavailable=~isempty(which('gcmfaces'));
if ~gcmfacesISavailable; 
    error('gcmfaces absent of matlab path => no atlas or weights were included'); 
end

%load standardized data set:
MITprofCur=MITprof_load([dataset.dirOut dataset.fileOut]);

%locate profile on grid:
MITprofCur=profiles_prep_locate(MITprofCur);

if ~strcmp(dataset.coord,'depth'); profiles_isopycnal_fields(dataset); end;
if ~strcmp(dataset.coord,'depth'); 
  MITprofCur.prof_Terr(:)=0;
  MITprofCur.prof_Serr(:)=0;
end;

%instrumental + representation error profile:
MITprofCur=profiles_prep_weights(dataset,MITprofCur,sigma);

%carry tests vs atlases:
MITprofCur.fillval=dataset.fillval;
[MITprofCur]=profiles_prep_tests_cmpatlas(dataset,MITprofCur,atlas);

%overwrite file with completed arrays:
MITprof_write([dataset.dirOut dataset.fileOut],MITprofCur);

%specify atlas names:
ncid=ncopen([dataset.dirOut dataset.fileOut],'write');
ncaddAtt(ncid,'prof_Testim','long_name','pot. temp. atlas (OCCA | PHC in arctic| WOA in marginal seas)');
ncaddAtt(ncid,'prof_Sestim','long_name','salinity atlas (OCCA | PHC in arctic| WOA in marginal seas)');
ncclose(ncid);

if ~strcmp(dataset.coord,'depth'); mygrid=[]; atlas=[]; sigma=[]; end;


